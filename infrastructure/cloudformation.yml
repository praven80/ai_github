AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI GitHub - Chat with GitHub repositories using Bedrock Claude'

Parameters:
  DeploymentBucketName:
    Type: String
    Description: "Name of the S3 bucket containing Lambda code and layers"

Resources:
  # Secrets Manager for API Keys
  AIGithubSecrets:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: 'AIGithubSecrets'
      Description: 'API keys for the AI GitHub application'
      SecretString: '{"GITHUB_TOKEN":""}'

  # DynamoDB Table for conversation history
  ConversationHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ConversationHistory
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: conversationId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ConversationIdIndex
          KeySchema:
            - AttributeName: conversationId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: AIGithubUserPool
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      MfaConfiguration: "OFF"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      LambdaConfig:
        PreSignUp: !GetAtt AutoConfirmUserFunction.Arn

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: AIGithubWeb
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  # Cognito Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: AIGithubIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # IAM Roles for Identity Pool
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess

  # Cognito Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  # Lambda function to auto-confirm users
  AutoConfirmUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt AutoConfirmUserRole.Arn
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
              console.log('Auto-confirming user');
              // Auto confirm user
              event.response.autoConfirmUser = true;
              
              // Auto verify email
              if (event.request.userAttributes.hasOwnProperty("email")) {
                  event.response.autoVerifyEmail = true;
              }
              
              // Return to Cognito
              callback(null, event);
          };

  # IAM Role for the Lambda function
  AutoConfirmUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Permission for Cognito to invoke the Lambda function
  AutoConfirmUserPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AutoConfirmUserFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  # Lambda execution role
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref AIGithubSecrets
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                  - 'bedrock-runtime:InvokeModel'
                  - 'bedrock-runtime:InvokeModelWithResponseStream'
                Resource: '*'
        - PolicyName: DynamoDBFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:DescribeTable'
                Resource: 
                  - !GetAtt ConversationHistoryTable.Arn
                  - !Sub "${ConversationHistoryTable.Arn}/index/*"
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cognito-idp:ListUserPools'
                Resource: '*'
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  # Lambda Function
  AIGithubLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          SECRETS_NAME: !Ref AIGithubSecrets
          COGNITO_USER_POOL_ID: !Ref UserPool
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: lambda-function.zip
      Layers:
        - !Ref LambdaDependenciesLayer

  # Lambda Layer for dependencies
  LambdaDependenciesLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: AIGithubDependencies
      Description: Dependencies for the AI GitHub Lambda
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: dependencies-layer.zip

  # S3 bucket for frontend hosting
  FrontendBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3000

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${AWS::StackName}"

  FrontendBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${FrontendBucket}/*
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendBucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # API Gateway REST API
  AIGithubAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: AIGithubAPI
      Description: API for AI GitHub application
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  APIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ParentId: !GetAtt AIGithubAPI.RootResourceId
      PathPart: 'api'

  ChatResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ParentId: !Ref APIResource
      PathPart: 'chat'

  RepoInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ParentId: !Ref APIResource
      PathPart: 'repo-info'

  # New resource for save-conversation endpoint
  SaveConversationResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ParentId: !Ref APIResource
      PathPart: 'save-conversation'

  # New resource for conversation-history endpoint
  ConversationHistoryResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ParentId: !Ref APIResource
      PathPart: 'conversation-history'

  # New resource for get-conversation endpoint
  GetConversationResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ParentId: !Ref APIResource
      PathPart: 'get-conversation'

  # API Methods for CORS and actual endpoints
  ChatOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref ChatResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ChatPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref ChatResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AIGithubLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  RepoInfoOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref RepoInfoResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  RepoInfoPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref RepoInfoResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AIGithubLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Methods for save conversation endpoint
  SaveConversationOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref SaveConversationResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  SaveConversationPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref SaveConversationResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AIGithubLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Methods for conversation history endpoint
  ConversationHistoryOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref ConversationHistoryResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ConversationHistoryGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref ConversationHistoryResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AIGithubLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Methods for get conversation endpoint
  GetConversationOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref GetConversationResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  GetConversationPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AIGithubAPI
      ResourceId: !Ref GetConversationResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AIGithubLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Deployment - updated to include new endpoints
  APIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ChatOptions
      - ChatPost
      - RepoInfoOptions
      - RepoInfoPost
      - SaveConversationOptions
      - SaveConversationPost
      - ConversationHistoryOptions
      - ConversationHistoryGet
      - GetConversationOptions
      - GetConversationPost
    Properties:
      RestApiId: !Ref AIGithubAPI
      StageName: prod

  # Lambda Permission for API Gateway - updated to allow all methods
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt AIGithubLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AIGithubAPI}/*/*/*

Outputs:
  FrontendBucket:
    Description: 'S3 bucket for frontend files'
    Value: !Ref FrontendBucket
  
  FrontendURL:
    Description: 'URL for the frontend website'
    Value: !Sub https://${CloudFrontDistribution.DomainName}
  
  APIEndpoint:
    Description: 'URL for the API'
    Value: !Sub https://${AIGithubAPI}.execute-api.${AWS::Region}.amazonaws.com/prod
  
  CloudFrontDomain:
    Description: 'CloudFront domain name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    
  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref UserPool

  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref UserPoolClient

  IdentityPoolId:
    Description: 'Cognito Identity Pool ID'
    Value: !Ref IdentityPool